import json
import numpy as np
from pathlib import Path
from typing import List, Dict
from datetime import datetime
import pdfplumber
from paddleocr import PaddleOCR
from PIL import Image
import io
import os
import utils


class PDFOCRProcessor:
    """
    Classe para processar PDFs escaneados usando PaddleOCR.
    Extrai texto e salva em formato .txt para uso posterior.
    """

    def __init__(self, input_dir: str, output_dir: str = None, use_gpu: bool = False):
        """
        Inicializa o processador de PDFs.

        Args:
            input_dir: Diret√≥rio com os PDFs originais
            output_dir: Diret√≥rio para salvar os .txt (padr√£o: input_dir/ocr_output)
            use_gpu: Se True, usa GPU (mais r√°pido). Se False, usa CPU
        """
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir) if output_dir else self.input_dir / "ocr_output"

        # Cria diret√≥rio de sa√≠da se n√£o existir
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Inicializa PaddleOCR
        print("üîß Inicializando PaddleOCR...")
        self.ocr = PaddleOCR(
            use_angle_cls=True,  # Detecta e corrige rota√ß√£o de texto
            lang='pt',  # Portugu√™s
            # use_gpu=use_gpu,  # GPU ou CPU
            # show_log=False,  # N√£o mostra logs verbosos
            det_db_thresh=0.3,  # Threshold de detec√ß√£o (0.3 √© bom para docs limpos)
            det_db_box_thresh=0.5  # Threshold de confian√ßa da caixa
        )
        print("‚úÖ PaddleOCR inicializado!")

        # Log de processamento
        self.log_file = self.output_dir / "processing_log.json"
        self.processing_log = self._load_log()

    def _load_log(self) -> Dict:
        """Carrega log de processamento anterior (para continuar de onde parou)."""
        if self.log_file.exists():
            with open(self.log_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"processed_files": [], "failed_files": [], "last_run": None}

    def _save_log(self):
        """Salva log de processamento."""
        self.processing_log["last_run"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(self.processing_log, f, indent=2, ensure_ascii=False)

    def get_pdf_files(self) -> List[Path]:
        """Retorna lista de todos os arquivos PDF no diret√≥rio de entrada."""
        pdf_files = list(self.input_dir.glob("*.pdf"))
        print(f"üìÅ {len(pdf_files)} arquivos PDF encontrados em {self.input_dir}")
        return pdf_files

    def extract_text_from_page(self, page_image: Image.Image) -> str:
        """
        Extrai texto de uma p√°gina usando PaddleOCR.

        Args:
            page_image: Imagem PIL da p√°gina

        Returns:
            Texto extra√≠do da p√°gina
        """
        # Converte imagem PIL para bytes
        img_bytes = io.BytesIO()
        page_image.save(img_bytes, format='PNG')
        img_bytes.seek(0)



        # Executa OCR
        # resultado = self.ocr.ocr(img_bytes.getvalue(), cls=True)
        # resultado = self.ocr.predict(img_bytes.getvalue())

        img_array = np.array(page_image)
        resultado = self.ocr.predict(img_array)
        # print(f'Tipo de resultado: {type(resultado)}')
        # print(f'Resultado OCR: {resultado[0]}')

        # Verifica se h√° resultado
        texto_linhas = []
        if resultado and len(resultado) > 0:
            print('Tem resultado')
            for pag in resultado:
                texto_linhas.append("\n".join(pag['rec_texts']))

        return "\n".join(texto_linhas)

    def process_single_pdf(self, pdf_path: Path, force_ocr: bool = False) -> bool:
        """
        Processa um √∫nico PDF.

        Args:
            pdf_path: Caminho do arquivo PDF
            force_ocr: Se True, for√ßa OCR mesmo se texto nativo existir

        Returns:
            True se processado com sucesso, False caso contr√°rio
        """
        pdf_name = pdf_path.stem
        output_txt = self.output_dir / f"{pdf_name}.txt"

        # Verifica se j√° foi processado
        if pdf_name in self.processing_log["processed_files"] and output_txt.exists():
            print(f"‚è≠Ô∏è  {pdf_name}.pdf j√° processado anteriormente. Pulando...")
            return True

        print(f"\n{'=' * 60}")
        print(f"üìÑ Processando: {pdf_name}.pdf")
        print(f"{'=' * 60}")

        try:
            textos_paginas = []

            with pdfplumber.open(pdf_path) as pdf:
                total_pages = len(pdf.pages)
                print(f"üìñ Total de p√°ginas: {total_pages}")

                for i, pagina in enumerate(pdf.pages, start=1):
                    print(f"  üîç P√°gina {i}/{total_pages}...", end=" ")

                    # Tenta extrair texto nativo primeiro (mais r√°pido)
                    texto_nativo = pagina.extract_text()

                    if texto_nativo and texto_nativo.strip() and not force_ocr:
                        # Texto nativo encontrado e v√°lido
                        textos_paginas.append(f"--- P√ÅGINA ---\n{texto_nativo}\n")
                        print("‚úÖ (texto nativo)")
                    else:
                        # Precisa de OCR
                        print("üîé (OCR necess√°rio)...", end=" ")

                        # Converte p√°gina para imagem de alta resolu√ß√£o
                        img = pagina.to_image(resolution=300).original

                        # Extrai texto com OCR
                        texto_ocr = self.extract_text_from_page(img)

                        textos_paginas.append(f"--- P√ÅGINA ---\n{texto_ocr}\n")
                        print("‚úÖ")

            # Salva texto completo em arquivo .txt
            texto_completo = "\n".join(textos_paginas)

            with open(output_txt, 'w', encoding='utf-8') as f:
                f.write(texto_completo)

            # Atualiza log
            self.processing_log["processed_files"].append(pdf_name)
            self._save_log()

            print(f"‚úÖ Texto salvo em: {output_txt.name}")
            print(f"üìä Total de caracteres extra√≠dos: {len(texto_completo)}")

            return True

        except Exception as e:
            print(f"‚ùå ERRO ao processar {pdf_name}.pdf: {str(e)}")
            self.processing_log["failed_files"].append({
                "file": pdf_name,
                "error": str(e),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
            self._save_log()
            return False

    def process_all_pdfs(self, force_ocr: bool = False, max_files: int = None):
        """
        Processa todos os PDFs do diret√≥rio de entrada.

        Args:
            force_ocr: Se True, for√ßa OCR mesmo se texto nativo existir
            max_files: Limite de arquivos a processar (√∫til para testes)
        """
        pdf_files = self.get_pdf_files()

        if max_files:
            pdf_files = pdf_files[:max_files]
            print(f"‚ö†Ô∏è  Modo teste: processando apenas {max_files} arquivos")

        print(f"\n{'=' * 60}")
        print(f"üöÄ INICIANDO PROCESSAMENTO EM LOTE")
        print(f"{'=' * 60}")
        print(f"üìÇ Diret√≥rio de entrada: {self.input_dir}")
        print(f"üíæ Diret√≥rio de sa√≠da: {self.output_dir}")
        print(f"üìä Total de arquivos: {len(pdf_files)}")
        print(f"{'=' * 60}\n")

        inicio = datetime.now()
        sucessos = 0
        falhas = 0

        for idx, pdf_file in enumerate(pdf_files, start=1):
            print(f"\n[{idx}/{len(pdf_files)}]", end=" ")

            if self.process_single_pdf(pdf_file, force_ocr):
                sucessos += 1
            else:
                falhas += 1

        # Relat√≥rio final
        fim = datetime.now()
        duracao = fim - inicio

        print(f"\n\n{'=' * 60}")
        print(f"‚ú® PROCESSAMENTO CONCLU√çDO")
        print(f"{'=' * 60}")
        print(f"‚úÖ Sucessos: {sucessos}")
        print(f"‚ùå Falhas: {falhas}")
        print(f"‚è±Ô∏è  Tempo total: {duracao}")
        print(f"üìä M√©dia por arquivo: {duracao / len(pdf_files) if pdf_files else 0}")
        print(f"üíæ Arquivos salvos em: {self.output_dir}")
        print(f"{'=' * 60}\n")

        # Mostra arquivos que falharam
        if self.processing_log["failed_files"]:
            print("\n‚ö†Ô∏è  Arquivos com erro:")
            for failed in self.processing_log["failed_files"]:
                print(f"  - {failed['file']}: {failed['error']}")

    def get_text_from_processed_file(self, pdf_name: str) -> str:
        """
        Recupera o texto j√° processado de um PDF.

        Args:
            pdf_name: Nome do PDF (sem extens√£o)

        Returns:
            Texto extra√≠do ou string vazia se n√£o encontrado
        """
        txt_file = self.output_dir / f"{pdf_name}.txt"

        if txt_file.exists():
            with open(txt_file, 'r', encoding='utf-8') as f:
                return f.read()
        else:
            print(f"‚ö†Ô∏è  Arquivo {pdf_name}.txt n√£o encontrado em {self.output_dir}")
            return ""


# ============================================================================
# EXEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    # Configura√ß√£o
    utils.garantir_cwd_para("Repositorio-Semantico")
    INPUT_DIR = os.path.join(os.getcwd(), "ICA_Extractor", "ICAS")
    OUTPUT_DIR = os.path.join(os.getcwd(), "ICA_Extractor", "textos_extraidos")

    # Cria inst√¢ncia do processador
    processor = PDFOCRProcessor(
        input_dir=INPUT_DIR,
        output_dir=OUTPUT_DIR,
        use_gpu=False  # Mude para True se tiver GPU CUDA dispon√≠vel
    )

    processor.process_all_pdfs()